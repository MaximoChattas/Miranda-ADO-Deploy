# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go
# Template requirements: *.go and go.mod files in directory

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  GOBIN:  '$(system.defaultWorkingDirectory)/Backend/bin' # Go binaries path

stages:
- stage: BuildAndTest
  displayName: 'Build And Test'
  jobs:
  - job: BuildAndTestBack
    displayName: 'Build and Test Backend'
    steps:
    - script: |
        mkdir -p '$(GOBIN)'
        echo '##vso[task.prependpath]$(GOBIN)'
      displayName: 'Set up the Go workspace'
      workingDirectory: '$(system.defaultWorkingDirectory)/Backend'

    - script: |
        ls -la $(system.defaultWorkingDirectory)/Backend
      displayName: 'List files in the working directory'
  
    - script: |
        go version
        if [ ! -f go.mod ]; then
            go mod init project
        fi
        go mod tidy
        go mod download
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        go build -o $(GOBIN)/golang-api -v .
      workingDirectory: '$(system.defaultWorkingDirectory)/Backend'
      displayName: 'Get dependencies, then build'

    - script: |
        go install github.com/jstemmer/go-junit-report@latest
        go test -v ./... | go-junit-report > $(system.defaultWorkingDirectory)/Backend/test-results.xml
      workingDirectory: '$(system.defaultWorkingDirectory)/Backend'
      displayName: 'Run tests and generate test report'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(system.defaultWorkingDirectory)/Backend/test-results.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish test results'
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(GOBIN)'
        ArtifactName: 'go-build-output'
        publishLocation: 'Container'
      displayName: 'Publish build artifacts'

- stage: DeployQA
  displayName: 'Deploy to Azure WebApp (QA)'
  jobs:
    - job: DeployBackQA
      displayName: 'Deploy Backend to QA'
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'go-build-output'
          downloadPath: '$(System.ArtifactsDirectory)/backend/golang-api'
      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: 'Azure subscription 1(f7ecd1b3-7c3e-4cb1-9653-fc24ede1711b)'
          appType: 'webAppLinux'
          WebAppName: 'Miranda-Backend-QA'
          packageForLinux: '$(System.ArtifactsDirectory)/Backend/golang-api'
