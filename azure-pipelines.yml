# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go
# Template requirements: *.go and go.mod files in directory

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  GOBIN:  '$(system.defaultWorkingDirectory)/Backend/bin' # Go binaries path

stages:
- stage: BuildAndTest
  displayName: 'Build And Test'
  jobs:
  - job: BuildAndTestBack
    displayName: 'Build and Test Backend'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.19'
    
    - task: Go@0
      displayName: 'Go mod init'
      inputs:
        command: custom
        customCommand: 'mod'
        arguments: 'init project'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Backend'

    - task: Go@0
      displayName: 'Go mod tidy'
      inputs:
        command: custom
        customCommand: 'mod'
        arguments: 'tidy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Backend'
    
    # - script: |
    #     go install github.com/jstemmer/go-junit-report@latest
    #     go test -v ./... | go-junit-report > $(system.defaultWorkingDirectory)/Backend/test-results.xml
    #   workingDirectory: '$(system.defaultWorkingDirectory)/Backend'
    #   displayName: 'Run tests and generate test report'

    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '$(system.defaultWorkingDirectory)/Backend/test-results.xml'
    #     failTaskOnFailedTests: true
    #   displayName: 'Publish test results'
    #   condition: always()
    
    - task: Go@0
      displayName: 'Go Build'
      inputs:
        command: 'build'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Backend'
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Backend'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactsStagingDirectory)/Backend/back-drop.zip
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        artifactName: backend-drop
        PathtoPublish: $(Build.ArtifactsStagingDirectory)/Backend
        publishLocation: 'Container'

- stage: DeployQA
  displayName: 'Deploy to Azure WebApp (QA)'
  jobs:
    - job: DeployBackQA
      displayName: 'Deploy Backend to QA'
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'backend-drop'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: 'Azure subscription 1(f7ecd1b3-7c3e-4cb1-9653-fc24ede1711b)'
          appType: 'webAppLinux'
          WebAppName: 'Miranda-Backend-QA'
          packageForLinux: '$(System.ArtifactsDirectory)/backend-drop/**/*.zip'
          RuntimeStack: 'GO|1.19'
