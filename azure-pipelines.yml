trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
# Backend Directory
  backPath: '$(System.DefaultWorkingDirectory)/Backend'
  backDrop: 'golang-drop'

# Frontend Directory
  frontPath: '$(System.DefaultWorkingDirectory)/Frontend'
  frontDrop: 'react-drop'
  
# Docker Images
  ResourceGroupName: 'MirandaProject'
  ConnectedServiceName: 'AzureResourceManager'
  acrLoginServer: "$(acrName).azurecr.io"
  acrName: 'MirandaHotelsACR'
  backImageName: 'miranda-go-api'
  backImageTag: 'latest'
  frontImageName: 'miranda-react-app'
  frontImageTag: 'latest'

# Azure App Services
  AppServicePlanLinux: 'MirandaASP'
  backAppServiceQA: 'miranda-back-qa'
  frontAppServiceQA: 'miranda-frontend-qa'


stages:
# -------------------------------------------------------------------------------
# |                 STAGE BUILD AND TEST FRONTEND AND BACKEND                   |
# -------------------------------------------------------------------------------
- stage: BuildAndTest
  displayName: 'Build And Test'
  jobs:
# -------------------------------------------------------------------------------
# |                        BUILD AND TEST API                                   |
# -------------------------------------------------------------------------------
  - job: BuildAndTestBack
    displayName: 'Build and Test Backend'
    steps:
    - task: GoTool@0
      inputs:
        version: '1.20'
      displayName: 'Set Go version'
    
    - task: Go@0
      displayName: 'Go mod init'
      inputs:
        command: custom
        customCommand: 'mod'
        arguments: 'init project'
        workingDirectory: '$(backPath)'

    - task: Go@0
      displayName: 'Go mod tidy'
      inputs:
        command: custom
        customCommand: 'mod'
        arguments: 'tidy'
        workingDirectory: '$(backPath)'
    
    - script: |
        go install github.com/jstemmer/go-junit-report@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        go test -v ./... | go-junit-report > $(System.DefaultWorkingDirectory)/Backend/test-results.xml
      workingDirectory: '$(backPath)'
      displayName: 'Run backend tests and generate test report'


    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(backPath)/test-results.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish backend test results'
      condition: always()
    
    - task: Go@0
      displayName: 'Go Build'
      inputs:
        command: 'build'
        workingDirectory: '$(backPath)'
    
    - task: ArchiveFiles@2
      displayName: 'Archive API files'
      inputs:
        rootFolderOrFile: '$(backPath)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactsStagingDirectory)/Backend/back-drop.zip
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish API Build Artifacts'
      inputs:
        artifactName: '$(backDrop)'
        PathtoPublish: $(Build.ArtifactsStagingDirectory)/Backend
        publishLocation: 'Container'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish API Dockerfile'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/Dockerfile/Backend/Dockerfile'
        artifact: 'dockerfile-back'

# -------------------------------------------------------------------------------
# |                        BUILD AND TEST FRONT                                 |
# -------------------------------------------------------------------------------
  - job: BuildAndTestFront
    displayName: 'Build And Test Frontend'
    steps:
    - task: NodeTool@0
      inputs:
       versionSpec: '22.x'
      displayName: 'Install Node.js'

    - script: |
       npm install
       npm run build
      workingDirectory: '$(frontPath)'
      displayName: 'Install dependencies and build React App'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(frontPath)/dist'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactsStagingDirectory)/Frontend/front-drop.zip

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Frontend Build Artifacts'
      inputs:
        artifactName: '$(frontDrop)'
        PathtoPublish: $(Build.ArtifactsStagingDirectory)/Frontend
        publishLocation: 'Container'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Frontend Dockerfile'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/Dockerfile/Frontend/Dockerfile'
        artifact: 'dockerfile-front'

# -------------------------------------------------------------------------------
# |     STAGE BUILD AND PUSH FRONTEND AND BACKEND DOCKER IMAGES TO ACR          |
# -------------------------------------------------------------------------------
- stage: DockerBuildAndPush
  displayName: 'Build and Push Docker Images to ACR'
  dependsOn: BuildAndTest
  jobs:
# -------------------------------------------------------------------------------
# |                        BUILD AND PUSH API                                    |
# -------------------------------------------------------------------------------
    - job: docker_build_and_push_api
      displayName: 'Build and Push API Docker Image to ACR'
      pool:
        vmImage: 'ubuntu-latest'
        
      steps:
        - checkout: self
        - task: DownloadPipelineArtifact@2
          displayName: 'Download API artifacts'
          inputs:
            buildType: 'current'
            artifactName: $(backDrop)
            targetPath: '$(Pipeline.Workspace)/$(backDrop)'
        
        - task: ExtractFiles@1
          displayName: 'Unzip API artifacts'
          inputs:
            archiveFilePatterns: '$(Pipeline.Workspace)/$(backDrop)/*.zip'
            destinationFolder: '$(Pipeline.Workspace)/Go-API'

        - task: DownloadPipelineArtifact@2
          displayName: 'Download API Dockerfile'
          inputs:
            buildType: 'current'
            artifactName: 'dockerfile-back'
            targetPath: '$(Pipeline.Workspace)/dockerfile-back'

        - task: AzureCLI@2
          displayName: 'Log in to Azure Container Registry (ACR)'
          inputs:
            azureSubscription: '$(ConnectedServiceName)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az acr login --name $(acrLoginServer)
        
        - script: ls -lR
          workingDirectory: $(Pipeline.Workspace)/$(backDrop)
    
        - task: Docker@2
          displayName: 'Build API Docker image'
          inputs:
            command: build
            repository: $(acrLoginServer)/$(backImageName)
            dockerfile: $(Pipeline.Workspace)/dockerfile-back/Dockerfile
            buildContext: '$(Pipeline.Workspace)/Go-API'
            tags: '$(backImageTag)'

        - task: Docker@2
          displayName: 'Upload API Docker image to ACR'
          inputs:
            command: push
            repository: $(acrLoginServer)/$(backImageName)
            tags: 'latest'

# -------------------------------------------------------------------------------
# |                        BUILD AND PUSH FRONT                                 |
# -------------------------------------------------------------------------------
    - job: docker_build_and_push_front
      displayName: 'Build and Push Front Docker Image to ACR'
      pool:
       vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Front artifacts'
          inputs:
            buildType: 'current'
            artifactName: $(frontDrop)
            targetPath: '$(Pipeline.Workspace)/$(frontDrop)'

        - task: ExtractFiles@1
          displayName: 'Unzip Front artifacts'
          inputs:
            archiveFilePatterns: '$(Pipeline.Workspace)/$(frontDrop)/*.zip'
            destinationFolder: '$(Pipeline.Workspace)/React-APP'

        - task: DownloadPipelineArtifact@2
          displayName: 'Download Front Dockerfile'
          inputs:
            buildType: 'current'
            artifactName: 'dockerfile-front'
            targetPath: '$(Pipeline.Workspace)/dockerfile-front'

        - task: AzureCLI@2
          displayName: 'Log in to Azure Container Registry (ACR)'
          inputs:
            azureSubscription: '$(ConnectedServiceName)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
             az acr login --name $(acrLoginServer)

        - task: Docker@2
          displayName: 'Build Front Docker image'
          inputs:
            command: build
            repository: $(acrLoginServer)/$(frontImageName)
            dockerfile: $(Pipeline.Workspace)/dockerfile-front/Dockerfile
            buildContext: '$(Pipeline.Workspace)/React-APP'
            tags: '$(frontImageTag)'

        - task: Docker@2
          displayName: 'Upload API Docker image to ACR'
          inputs:
            command: push
            repository: $(acrLoginServer)/$(frontImageName)
            tags: 'latest'

# -------------------------------------------------------------------------------
# |     STAGE DEPLOY FRONTEND AND BACKEND TO AZURE APP SERVICES QA              |
# -------------------------------------------------------------------------------
- stage: DeployImagesToAppServiceQA
  displayName: 'Deploy Docker Images to Azure App Service (QA)'
  dependsOn: 
  - BuildAndTest
  - DockerBuildAndPush
  condition: succeeded()
  jobs:
# -------------------------------------------------------------------------------
# |               DEPLOY API TO AZURE APP SERVICE                               |
# -------------------------------------------------------------------------------
    - job: DeployAPIImageToAppServiceQA
      displayName: 'Deploy API to Azure App Service (QA)'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Create API Azure App Service resource and configure image'
          inputs:
            azureSubscription: '$(ConnectedServiceName)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Check if API App Service already exists
              if ! az webapp list --query "[?name=='$(backAppServiceQA)' && resourceGroup=='$(ResourceGroupName)'] | length(@)" -o tsv | grep -q '^1$'; then
                echo "API App Service doesn't exist. Creating new..."
                # Create App Service without specifying container image
                az webapp create --resource-group $(ResourceGroupName) --plan $(AppServicePlanLinux) --name $(backAppServiceQA) --deployment-container-image-name "nginx"  # Especifica una imagen temporal para permitir la creación
              else
                echo "API App Service already exists. Updating image..."
              fi

              # Configure App Service to use Azure Container Registry (ACR)
              az webapp config container set --name $(backAppServiceQA) --resource-group $(ResourceGroupName) \
                --container-image-name $(acrLoginServer)/$(backImageName):$(backImageTag) \
                --container-registry-url https://$(acrLoginServer) \
                --container-registry-user $(acrName) \
                --container-registry-password $(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)
              # Set environment variables
              az webapp config appsettings set --name $(backAppServiceQA) --resource-group $(ResourceGroupName) \
                --settings DBCONNSTRING="$(connection_string_qa)" \

# -------------------------------------------------------------------------------
# |               DEPLOY FRONT TO AZURE APP SERVICE                             |
# -------------------------------------------------------------------------------
    - job: DeployFrontImageToAppServiceQA
      displayName: 'Deploy Front to Azure App Service (QA)'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Create Front Azure App Service resource and configure image'
          inputs:
            azureSubscription: '$(ConnectedServiceName)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Check if API App Service already exists
              if ! az webapp list --query "[?name=='$(frontAppServiceQA)' && resourceGroup=='$(ResourceGroupName)'] | length(@)" -o tsv | grep -q '^1$'; then
                echo "Front App Service doesn't exist. Creating new..."
                # Create App Service without specifying container image
                az webapp create --resource-group $(ResourceGroupName) --plan $(AppServicePlanLinux) --name $(frontAppServiceQA) --deployment-container-image-name "nginx"  # Especifica una imagen temporal para permitir la creación
              else
                echo "API App Service already exists. Updating image..."
              fi

              # Configure App Service to use Azure Container Registry (ACR)
              az webapp config container set --name $(frontAppServiceQA) --resource-group $(ResourceGroupName) \
                --container-image-name $(acrLoginServer)/$(frontImageName):$(frontImageTag) \
                --container-registry-url https://$(acrLoginServer) \
                --container-registry-user $(acrName) \
                --container-registry-password $(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)
              # Set environment variables
              az webapp config appsettings set --name $(frontAppServiceQA) --resource-group $(ResourceGroupName) \
                --settings API_URL="$(api_url_qa)" \

# -------------------------------------------------------------------------------
# |           RUN INTEGRATION TESTS ON AZURE APP SERVICES                       |
# -------------------------------------------------------------------------------
    - job: RunCypressTests
      displayName: 'Run Cypress Integration Tests'
      dependsOn: [DeployFrontImageToAppServiceQA, DeployAPIImageToAppServiceQA]
      condition: succeeded()
      steps:
        - script: npm install ts-node typescript --save-dev
          displayName: 'Install typescript'
          workingDirectory: '$(frontPath)'

        - script: npx cypress run --env apiUrl=$(api_url_as_qa),homeUrl=$(front_url_as_qa)
          workingDirectory: '$(frontPath)'
          displayName: 'Run integration tests'
          continueOnError: true
        
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '*.xml'
            searchFolder: '$(frontPath)/cypress/results'
            testRunTitle: 'Cypress App Services Tests'
            failTaskOnFailedTests: true
